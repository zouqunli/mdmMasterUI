apply plugin: 'maven' //maven仓库插件
apply plugin: 'signing' //使用signing plugin做数字签名


// 声明一个configuration
configurations {
    deployerJars
}

repositories {
    mavenCentral()
}

dependencies {
    // deployJar是前面configuration声明的
//    deployerJars "org.apache.maven.wagon:wagon-http:2.2" // http依赖库
    /**
     * http	用  org.apache.maven.wagon:wagon-http:2.2
     ssh 用	org.apache.maven.wagon:wagon-ssh:2.2
     ssh-external 用 org.apache.maven.wagon:wagon-ssh-external:2.2
     ftp 用	org.apache.maven.wagon:wagon-ftp:2.2
     webdav 用 org.apache.maven.wagon:wagon-webdav:1.0-beta-2
     */
}

// 判断版本是Release or Snapshots
def isReleaseBuild(){
    return VERSION.contains("RELEASE")
}
//获取仓库Url
def getRepositoryUrl(){
    return isReleaseBuild()? RELEASE_URL : SNAPSHOT_URL
}


uploadArchives {
    repositories.mavenDeployer {
        //配置
//        configuration = configurations.deployerJars

        //签名
        beforeDeployment{
            MavenDeployment deployment -> signing.signPom(deployment)
        }

        pom.project {
            version VERSION //版本号，多次打包不能一致
            artifactId ARTIFACTID //识别Id，与项目名称一致即可
            groupId GROUPID //组号，类似包名
            packaging PACKAGING //打包格式
            description DESCRIPTION //描述
        }
        //打包的路径
//        repository(url: 'file://D:/ServiceStudy/nexus-Repositories') //本地打包
        repository(url: getRepositoryUrl()){  //nexus 打包
            authentication(userName: NAME, password: PASSWORD) // maven授权信息
        }
    }
}


// 进行数字签名
signing {
    // 当 发布版本 & 存在"uploadArchives"任务时，才执行
 required { isReleaseBuild() && gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
}



// type显示指定任务类型或任务, 这里指定要执行Javadoc这个task,这个task在gradle中已经定义
task androidJavadocs(type: Javadoc) {
    // 设置源码所在的位置
    source = android.sourceSets.main.java.sourceFiles
}



// 生成javadoc.jar
task androidJavadocsJar(type: Jar) {
    // 指定文档名称
    classifier = 'javadoc'
    from androidJavadocs.destinationDir
}

// 生成sources.jar
task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.sourceFiles
}

// 产生相关配置文件的任务
artifacts {
    archives androidSourcesJar
    archives androidJavadocsJar
}





